<?php 

/**
* Implementation of hook_nodeapi()
*/
function quilted_support_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch($op) {
    case 'load':

			// I'm not sure if this works in this function and not in the template. -Erik
			// This is LIFO (Last In First Out) so put them in reverse order, i.e. most important last.
		  if ($page) {
		    $template_files = array('node-default-page', 'node-'. $node->type .'-page', 'node-'. $node->nid .'-page');
		    if (file_exists(path_to_theme() .'/css/node-pages.css')) {
		      drupal_add_css(path_to_theme() .'/css/node-pages.css', 'theme');
		    }
		  } else {
		    $template_files = array('node-default', 'node-'. $node->type, 'node-'. $node->nid);
		    if (file_exists(path_to_theme() .'/css/node-teasers.css')) {
		      drupal_add_css(path_to_theme() .'/css/node-teasers.css', 'theme');
		    }
		  }
		
		  // Set up items in taxonomy variables by vocabulary on nodes
		  if ($terms = taxonomy_node_get_terms($node, $key = 'tid')) {
		    foreach ($terms as $tid => $term) {
		      $terms_by_vid[$term->vid][$tid] = $term;
		    }

		  	foreach ($terms_by_vid as $vid=>$term) {
		  	  $taxo_term = array();
		  	  foreach ($term as $term_single) {
		  	    $taxo_term[] = l($term_single->name, 'taxonomy/term/'. $term_single->tid, array('title' => $term_single->description));
		  	  }
		  	  $vocab = taxonomy_vocabulary_load($vid);
		  	  $vocab_name = str_replace(" ", "_", strtolower($vocab->name));
		  	  $taxo_vocab = 'taxo_vocab_' . $vocab_name;
		  	  $node->$taxo_vocab = implode(', ', $taxo_term);
		  	}

			}
			
			// Optionally, run node-type-specific preprocess functions, like
		  // drupalconsf_preprocess_node_page() or drupalconsf_preprocess_node_story().
		  $function = __FUNCTION__ . '_' . $vars['node']->type;
		  if (function_exists($function)) {
		    $function($vars);
		  }
		  

      // if ($node->type == '') {
      //   // add an array of initial nodes to node object
      //   $node->initials = array();
      //   $initial_result = db_query("SELECT cti.nid FROM {content_type_initial} cti INNER JOIN {node} n ON cti.nid = n.nid WHERE cti.field_initial_question_nid  = %d AND n.status = 1", $node->nid);
      //   while ($initial = db_fetch_object($initial_result)) {
      //     $node->initials[] = node_load($initial->nid);
      //   }
      //   // add a count of all related assets
      //   $node->asset_count = db_result(db_query("SELECT COUNT(nid) FROM {content_type_publication} WHERE field_publication_related_ques_nid = %d", $node->nid));
      // }
      // // Set the title to be the full title (avoids 250 char limit in schema);
      // $node->title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $node->nid));
      // 
      // // Set the appropriate page title for question nodes
      // if (arg(0) == 'node' && is_numeric(arg(1)) && db_result(db_query("SELECT type FROM {node} WHERE nid = %d", arg(1))) == 'question') {
      //   drupal_set_title(db_result(db_query("SELECT title FROM {node} WHERE nid = %d", arg(1))));
      // }
      break;

    case 'update':
			break;
    case 'insert':
 			break;
	}
}

/**
 * Implementation of hook_user().
 */
function quilted_support_user($op, &$edit, &$account, $category = NULL) {
  global $user;

  switch ($op) {
    case 'load':
			$profile_node = content_profile_load('profile', $account->uid);
      $account->node_profile_nid = $profile_node->nid;
      break;
  }
}


/**
* Check to see if a user has been assigned a certain role.
*
* @param $role
*   The name of the role you're trying to find.
* @param $user
*   The user object for the user you're checking; defaults to the current user.
* @return
*   TRUE if the user object has the role, FALSE if it does not.
*/
function quilted_support_user_has_role($role, $user = NULL) {
  if ($user == NULL) {
    global $user;
  }

  if (is_array($user->roles) && in_array($role, array_values($user->roles))) {
    return TRUE;
  }

  return FALSE;
}